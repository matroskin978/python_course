'''
В Python, есть два похожих типа — список (list) и кортеж (tuple). Самая известная разница между ними состоит в том, что кортежи неизменяемы. Вы не можете изменить объекты в tuple. Но вы можете модифицировать изменяемые объекты внутри кортежа:
b = (1,[1,2,3],3)
print(b)
b[1][1] = 'test'
print(b)

a = 1
b = 2

(a, b) = (b, a)
__sizeof__()
'''


'''
Набор (set) — это неупорядоченная, неизменяемая* и неиндексированная коллекция. Элементы набора неупорядочены, неизменяемы и не допускают дублирования значений.
* Элементы набора нельзя изменить, но вы можете удалять элементы и добавлять новые элементы.
'''

set1 = set()
print(set1, type(set1), id(set1))

set2 = {1, 2, 3, 100}
print(set2, type(set2), id(set2))

# добавим 1 элемент
set1.add(1)
print(set1, type(set1), id(set1))
# добавим несколько элементов
set1.update({2, 3, 4, 5})
print(set1, type(set1), id(set1))
# добавим несколько элементов
set1.update(['hello', 'world'])
print(set1, type(set1), id(set1))

set3 = set(['hello', 'world'])
print(set3)

print(set1)
# удалим первый элемент
print(set1.pop())

# удалим конкретный элемент
if 10 in set1:
    set1.remove(10)

# удалим конкретный элемент без ошибки
set1.discard(10)
print(set1)

'''
Вы не можете получить доступ к элементам в наборе, ссылаясь на индекс или ключ.
Но вы можете пройтись по элементам набора, используя цикл for, или спросить, присутствует ли указанное значение в наборе, используя ключевое слово in.
'''

# print(set1[1])  # error
for i, el in enumerate(set1, 1):
    print(i, el)

'''
Вы можете использовать метод union(), который возвращает новый набор, содержащий все элементы из обоих наборов, или метод update(), который вставляет все элементы из одного набора в другой:
'''
print(set1, id(set1))
print(set2, id(set2))
set1 = set1.union(set2)
print(set1, id(set1))
print(set2, id(set2))

'''
Метод intersection_update() сохранит только те элементы, которые присутствуют в обоих наборах.
'''
set1.intersection_update(set2)
print(set1, id(set1))
print(set2, id(set2))


'''
С множествами можно выполнять множество операций: находить объединение, пересечение...
Множества удобно использовать для удаления повторяющихся элементов:
'''
list1 = [1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 7]
print(list1)
list1 = list(set(list1))
print(list1)

# frozenset
'''
Единственное отличие set от frozenset заключается в том, что set - изменяемый тип данных, а frozenset - нет. Примерно похожая ситуация с списками и кортежами.
'''
set3 = {1, 2, 3}
print(set3, type(set3))
set3.add(4)
print(set3)

set_f = frozenset({1, 2, 3})
print(set_f, type(set_f))
# set_f.add(4)
